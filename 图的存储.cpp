/**
 * 图的存储方式主要有以下四种：
 *      1.邻接矩阵法      -> 适合存储稠密图
 *      2.邻接表法        -> 适合存储稀疏图
 *      3.十字链表法      -> 存储有向图（方便求顶点的入度和出度）
 *      4.邻接多重表法    -> 存储无向图（不会冗余重复存储同一条边）
 */


// 1.邻接矩阵法（有向图和无向图都可以使用）
/**
 * 对于一个有 n 个节点的图
 * 使用一个 n * n 的矩阵来存储图的逻辑关系
 * 第 i 行、第 j 列的值为 1 表示编号为 i 的顶点与编号为 j 的顶点之间有一条边
 * 若值为 0 表示没有边
 * 
 * 也可以使用大于 1 的数字表示这条边的权重
 */


// 2.邻接表法（有向图和无向图均可以使用，但是无向图会冗余存储边的信息）
/**
 * 求一个顶点的出度很容易
 * 但是求一个顶点的入度很难
 */
class Edge {
    int dest;        // 从起始点到达的终点顶点在数组中的索引
    Edge* next;      // 指向从同一个起始点出发可以到达的另一个终点顶点的边
    int weight;      // 这条边的权重
};

class Node {
    int data;                // 该顶点的数据
    Edge* firstEdge;         // 从该顶点出发的第一条边
};

Node nodes[10];   // 用于存储一个有 10 个顶点的图



// 3.十字链表法（仅用于存储有向图）
/**
 * 弥补邻接表法求顶点入度的困难
 * 使用十字链表法来存储邻接矩阵（见 十字链表.cpp）
 */


// 4.邻接多重表法（仅用于存储无向图，用于弥补邻接表法中无向图边的冗余存储问题）
/**
 * 融合了邻接表法和十字链表法
 * 同一条边只有一个 Edge 对象
 */
class Edge {
    int a;             // 这条边连接的第一个顶点
    int b;             // 这条边连接的第二个顶点
    int weight;          // 这条边的权重
    Edge* a_next;      // 指向能连接编号为 a 的顶点的另一个边
    Edge* b_next;      // 指向能连接编号为 b 的顶点的另一个边
};

class Node {
    int data;                // 该顶点的数据
    Edge* firstEdge;         // 该顶点的第一条边
};

Node nodes[10];   // 用于存储一个有 10 个顶点的图